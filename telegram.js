const axios = require("axios");
const FormData = require("form-data");
const fs = require("fs");
require("dotenv").config();

const TelegramSubscriber = require("./models/TelegramSubscriber");

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const ADMIN_CHAT = process.env.TELEGRAM_CHAT_ID || null;

if (!BOT_TOKEN) {
  console.warn("‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env");
}

async function getRecipients(extraChatIds = []) {
  const set = new Set();
  if (ADMIN_CHAT) set.add(String(ADMIN_CHAT));
  try {
    const subs = await TelegramSubscriber.findAll({ where: { isActive: true } });
    subs.forEach((s) => s.chatId && set.add(String(s.chatId)));
  } catch (e) {
    console.error("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:", e.message);
  }
  (extraChatIds || []).forEach((id) => id && set.add(String(id)));
  return Array.from(set);
}

async function sendText(chatId, text) {
  try {
    await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      chat_id: chatId,
      text,
      parse_mode: "Markdown",
      disable_web_page_preview: true,
    });
  } catch (e) {
    console.error(`‚ùå sendMessage(${chatId}) error:`, e.response?.data || e.message);
  }
}

async function sendPhoto(chatId, fileOrId, filename) {
  try {
    if (typeof fileOrId === "string" && !Buffer.isBuffer(fileOrId)) {
      await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendPhoto`, {
        chat_id: chatId,
        photo: fileOrId,
      });
      return null;
    }
    const form = new FormData();
    form.append("chat_id", chatId);
    form.append("photo", fileOrId, { filename: filename || "photo.jpg" });

    const resp = await axios.post(
      `https://api.telegram.org/bot${BOT_TOKEN}/sendPhoto`,
      form,
      { headers: form.getHeaders() }
    );

    const photos = resp?.data?.result?.photo || [];
    const best = photos[photos.length - 1];
    return best?.file_id || null;
  } catch (e) {
    console.error(`‚ùå sendPhoto(${chatId}) error:`, e.response?.data || e.message);
    return null;
  }
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –§–ò–û
function fullName(o) {
  return [o.lastName, o.firstName, o.middleName].filter(Boolean).join(" ").trim();
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑ –≤ Telegram (—Ç–µ–∫—Å—Ç + –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤—ã–∑–æ–≤–∞:
 *  - sendOrderToTelegram(order, attachmentsArray)
 *  - sendOrderToTelegram(order, { extraChatIds, includeAdmin })
 */
const sendOrderToTelegram = async (order, attachmentsOrOpts = [], maybeOpts = {}) => {
  let attachments = [];
  let opts = {};

  if (Array.isArray(attachmentsOrOpts)) {
    attachments = attachmentsOrOpts;
    opts = maybeOpts || {};
  } else if (attachmentsOrOpts && typeof attachmentsOrOpts === "object") {
    opts = attachmentsOrOpts;
  }

  const { extraChatIds = [], includeAdmin = true } = opts;

  const message =
    `üßæ *–ó–∞–∫–∞–∑ #${order.id} ‚Äî –û–ü–õ–ê–ß–ï–ù–û*\n` +
    `üë§ ${fullName(order) || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n` +
    `üìû ${order.phone || "-"}\n` +
    `üëï ${order.productType || "-"} ‚Ä¢ ${order.color || "-"} ‚Ä¢ ${order.size || "-"}\n` +
    (order.embroideryType ? `üßµ ${order.embroideryType}${order.customText ? ` ‚Äî ¬´${order.customText}¬ª` : ""}\n` : "") +
    `üì¶ ${order.deliveryAddress || "-"}\n` +
    `üí∞ ${order.totalPrice ?? 0} ‚ÇΩ\n` +
    (order.paidAt ? `‚è± ${new Date(order.paidAt).toLocaleString("ru-RU")}\n` : "");

  // –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
  let recipients = await getRecipients(extraChatIds);
  if (!includeAdmin && ADMIN_CHAT) {
    recipients = recipients.filter((id) => id !== String(ADMIN_CHAT));
  }
  if (!recipients.length) {
    console.warn("‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞");
    return;
  }

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º —Ñ–æ—Ç–æ:
  // attachments: [{ path, mime, originalName, size, ... }]
  const photos = [];
  if (attachments.length) {
    for (const att of attachments) {
      try {
        const buffer = fs.readFileSync(att.path);
        const filename = att.originalName || att.filename || "image.jpg";
        photos.push({ buffer, filename });
      } catch (e) {
        console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª:", att.path, e.message);
      }
    }
  }

  // –†–∞—Å—Å—ã–ª–∫–∞: —Ç–µ–∫—Å—Ç + —Ñ–æ—Ç–æ (–ø–æ –æ–¥–Ω–æ–º—É), –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ (–æ–Ω–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ)
  for (const chatId of recipients) {
    await sendText(chatId, message);

    let cachedFileIds = [];
    for (let i = 0; i < photos.length; i++) {
      const p = photos[i];
      if (cachedFileIds[i]) {
        await sendPhoto(chatId, cachedFileIds[i]);
        continue;
      }
      const fileId = await sendPhoto(chatId, p.buffer, p.filename);
      if (fileId) cachedFileIds[i] = fileId;
    }
  }
};

module.exports = sendOrderToTelegram;
