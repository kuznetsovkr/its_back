const express = require('express');
const crypto = require('crypto');
const router = express.Router();
const { createInvoice } = require('../lib/paykeeper');
const Order = require('../models/Order');

const { PAYKEEPER_SECRET_SEED } = process.env;
const fmt2 = (n) => Number(n).toFixed(2);

router.get('/ping', (_req, res) => res.json({ ok: true }));

// 2.1 –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É (–≤—Å–µ–≥–¥–∞ 1 ‚ÇΩ)
router.post('/link', async (req, res) => {
  try {
    const { orderId } = req.body;
    const order = await Order.findByPk(orderId);
    if (!order) return res.status(404).json({ message: 'Order not found' });
    if (order.paymentStatus === 'paid') return res.status(409).json({ message: 'Order already paid' });

    // üëá –•–ê–†–î–ö–û–î–ò–ú 1 –†–£–ë–õ–¨
    const pay_amount = fmt2(1);
    const clientid = [order.lastName, order.firstName, order.middleName].filter(Boolean).join(' ') || '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å';
    const service_name = `–¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #${order.id}`;
    const orderid = String(order.id);
    const client_phone = order.phone || '';
    const client_email = ''; // –µ—Å–ª–∏ —Å–æ–±–µ—Ä—ë—à—å email ‚Äî –ø–æ–¥—Å—Ç–∞–≤–∏—à—å

    const { invoice_id, pay_url } = await createInvoice({
      pay_amount,
      clientid,
      orderid,
      client_email,
      client_phone,
      service_name,
    });

    await order.update({
      paymentProvider: 'paykeeper',
      paymentStatus: 'pending',
      paykeeperInvoiceId: invoice_id,
    });

    res.json({ pay_url, invoice_id });
  } catch (e) {
    console.error('paykeeper/link error', e?.response?.data || e);
    res.status(500).json({ message: 'Failed to create payment link' });
  }
});

// 2.2 Webhook –æ—Ç PayKeeper (POST-–æ–ø–æ–≤–µ—â–µ–Ω–∏–µ)
router.post('/callback', express.urlencoded({ extended: false }), async (req, res) => {
  try {
    const { id, sum, clientid = '', orderid = '', key } = req.body;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏: md5(id + number_format(sum,2,'.','') + clientid + orderid + secret)
    const expected = crypto.createHash('md5').update(
      String(id) + fmt2(sum) + String(clientid) + String(orderid) + PAYKEEPER_SECRET_SEED
    ).digest('hex');

    if (key !== expected) {
      console.warn('PayKeeper webhook: bad signature', { body: req.body, expected });
      return res.status(400).send('Error! Hash mismatch');
    }

    const order = await Order.findByPk(orderid);
    if (!order) return res.status(404).send('Order not found');

    // –î–ª—è —Ç–µ—Å—Ç–∞ –º–æ–∂–Ω–æ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—É–º–º—É, –Ω–æ –ª—É—á—à–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–µ—Ä–∫—É:
    if (fmt2(sum) !== fmt2(1)) {
      console.warn('PayKeeper webhook: sum mismatch', { orderid, sum });
      // –º–æ–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å –æ–ø–ª–∞—Ç—É, –Ω–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ failed/attention, —Ä–µ—à–∞–π —Å–∞–º
      // return res.status(400).send('Error! Sum mismatch');
    }

    if (order.paymentStatus !== 'paid') {
      await order.update({
        paymentStatus: 'paid',
        paykeeperPaymentId: id,
        paidAt: new Date(),
        status: '–û–ø–ª–∞—á–µ–Ω–æ', // –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å-—Å—Ç–∞—Ç—É—Å
      });
      // —Ç—É—Ç —Ç–≤–æ—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞: –º–∏–Ω—É—Å—É–µ–º –æ—Å—Ç–∞—Ç–∫–∏, —Ç–µ–ª–µ–≥—Ä–∞–º –∏ —Ç.–¥.
    }

    // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: OK md5(id + secret)
    const okHash = crypto.createHash('md5').update(String(id) + PAYKEEPER_SECRET_SEED).digest('hex');
    return res.send(`OK ${okHash}`);
  } catch (e) {
    console.error('paykeeper/callback error', e);
    return res.status(500).send('Error');
  }
});

module.exports = router;
