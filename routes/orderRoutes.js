const express = require("express");
const jwt = require("jsonwebtoken");
const User = require("../models/User");
const Order = require("../models/Order");
const sendOrderToTelegram = require("../telegram");
const sequelize = require("../db");
const Inventory = require("../models/Inventory");
const PaymentEvent = require("../models/PaymentEvent");
const router = express.Router();

const multer = require("multer");
const fs = require("fs");
const path = require("path");
const { checkItemAndNotify } = require("../services/lowStockMonitor"); // –ø—É—Ç—å –ø–æ–¥–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω
const { findInventoryForOrder } = require("../services/inventoryResolver");


const upload = multer({ dest: "uploads/" }); // –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã

// ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
router.post("/create", upload.array("images", 10), async (req, res) => {
    try {
        const authHeader = req.headers.authorization;
        console.log("üîë –ó–∞–≥–æ–ª–æ–≤–æ–∫ Authorization:", authHeader);

        let user = null;
        if (authHeader) {
            try {
                const token = authHeader.split(" ")[1];
                user = jwt.verify(token, process.env.JWT_SECRET);
                console.log("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:", user);
            } catch (error) {
                console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞:", error.message);
            }
        }

        let userData;
        if (user) {
            userData = await User.findByPk(user.id);
            console.log("‚úÖ –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userData);
        } else {
            console.log("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞.");
            userData = {
                firstName: req.body.firstName || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                lastName: req.body.lastName || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                middleName: req.body.middleName || "",
                phone: req.body.phone || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            };
        }

        console.log("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –¥–∞–Ω–Ω—ã–º–∏:", {
            ...userData,
            productType: req.body.productType,
            color: req.body.color,
            size: req.body.size,
            embroideryType: req.body.embroideryType,
            customText: req.body.customText,
            comment: req.body.comment,
        });

        const inv = await findInventoryForOrder(req.body.productType, req.body.color, req.body.size);

        if (!inv) {
        console.error("[CREATE] inventory NOT FOUND for:", req.body.productType, req.body.color, req.body.size);
        return res.status(400).json({ message: "–ö–æ–º–±–∏–Ω–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
        }
        if (inv.quantity < 1) {
        console.error("[CREATE] not enough stock id=", inv.id, "qty=", inv.quantity);
        return res.status(409).json({ message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ" });
        }

        // ‚úÖ –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ –≤ –ë–î
            const order = await Order.create({
                userId: user?.id || null,
                phone: userData.phone,
                firstName: userData.firstName,
                lastName: userData.lastName,
                middleName: userData.middleName,
                productType: req.body.productType,
                color: req.body.color,
                size: req.body.size,
                embroideryType: req.body.embroideryType,
                customText: req.body.customText,
                comment: req.body.comment,
                orderDate: new Date(),
                status: "–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã",
                totalPrice: req.body.totalPrice ?? null,
                deliveryAddress: req.body.deliveryAddress ?? null,
                inventoryId: inv.id, // <-- –í–ê–ñ–ù–û
            });

        console.log("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î", order);

        // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ Telegram
        await sendOrderToTelegram({
            orderDate: order.orderDate,
            phone: order.phone,
            fullName: `${order.lastName} ${order.firstName} ${order.middleName}`,
            productType: req.body.productType,
            color: req.body.color,
            size: req.body.size,
            embroideryType: req.body.embroideryType,
            customText: req.body.customText,
            comment: req.body.comment,
            totalPrice: req.body.totalPrice, 
            deliveryAddress: req.body.deliveryAddress, 
            images: req.files, // –º–∞—Å—Å–∏–≤ —Ñ–∞–π–ª–æ–≤
        });        

        console.log("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram");

        res.json({ message: "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω", orderId: order.id });
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞", error: error.message });
    }
});
router.put("/update-status/:orderId", async (req, res) => {
    try {
        const { orderId } = req.params;
        const { status } = req.body;

        const validStatuses = ["–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã", "–û–ø–ª–∞—á–µ–Ω–æ", "–ü—Ä–∏–Ω—è—Ç", "–î–∏–∑–∞–π–Ω", "–í—ã—à–∏–≤–∫–∞", "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω", "–û—Ç–º–µ–Ω–µ–Ω"];
        if (!validStatuses.includes(status)) {
            return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å" });
        }

        const order = await Order.findByPk(orderId);
        if (!order) {
            return res.status(404).json({ message: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        order.status = status;
        await order.save();

        res.json({ message: "–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω", order });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞" });
    }
});

// üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –ø–æ –Ω–æ–º–µ—Ä—É
router.get("/status/:orderId", async (req, res) => {
    try {
        const { orderId } = req.params;
        const order = await Order.findByPk(orderId);

        if (!order) {
            return res.status(404).json({ message: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        res.json({ status: order.status });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

// üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get("/user", async (req, res) => {
    try {
        const token = req.headers.authorization?.split(" ")[1];
        if (!token) return res.status(401).json({ message: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞" });

        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        const userId = decoded.id;

        const orders = await Order.findAll({ where: { userId }, order: [["orderDate", "DESC"]] });

        res.json(orders);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

router.get("/all", async (req, res) => {
    try {
        const token = req.headers.authorization?.split(" ")[1];
        if (!token) return res.status(401).json({ message: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞" });

        const decoded = jwt.verify(token, process.env.JWT_SECRET);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        const user = await User.findByPk(decoded.id);
        if (!user || user.role !== "admin") {
            return res.status(403).json({ message: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞" });
        }

        // –ï—Å–ª–∏ –∞–¥–º–∏–Ω, –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã
        const orders = await Order.findAll({ order: [["orderDate", "DESC"]] });

        res.json(orders);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

// POST /api/orders/confirm/:orderId
router.post("/confirm/:orderId", async (req, res) => {
  const { orderId } = req.params;
  const { provider = "manual", eventId = `manual-${orderId}` } = req.body || {};

  const t = await sequelize.transaction();
  try {
    // 1) Idempotency
    await PaymentEvent.findOrCreate({
      where: { eventId },
      defaults: { provider, orderId, payload: req.body || {} },
      transaction: t,
    });

    // 2) –õ–æ—á–∏–º –∑–∞–∫–∞–∑
    const order = await Order.findByPk(orderId, { transaction: t, lock: t.LOCK.UPDATE });
    if (!order) {
      await t.rollback();
      return res.status(404).json({ message: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    if (order.status === "–û–ø–ª–∞—á–µ–Ω–æ") {
      await t.commit();
      return res.json({ ok: true, alreadyProcessed: true });
    }

    // 3) –õ–æ—á–∏–º —Å—Ç—Ä–æ–∫—É —Å–∫–ª–∞–¥–∞ –∏ —Å–ø–∏—Å—ã–≤–∞–µ–º 1 —à—Ç

    let item;

    if (order.inventoryId) {
    item = await Inventory.findByPk(order.inventoryId, { transaction: t, lock: t.LOCK.UPDATE });
    } else {
    // —Ä–µ–∑–µ—Ä–≤ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –±–µ–∑ inventoryId
    const { findInventoryForOrder } = require("../services/inventoryResolver");
    item = await findInventoryForOrder(order.productType, order.color, order.size);
    if (item) {
        order.inventoryId = item.id;
        await order.save({ transaction: t });
    }
    }

    if (!item || item.quantity < 1) {
    throw new Error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ");
    }

    item.quantity = Math.max(0, item.quantity - 1);
    await item.save({ transaction: t });

    console.log("[CONFIRM]", { orderId, inventoryId: item.id, newQty: item.quantity });


    // 4) –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
    order.status = "–û–ø–ª–∞—á–µ–Ω–æ";
    order.paidAt = new Date();
    if (req.body.totalPrice) order.totalPrice = req.body.totalPrice;
    if (req.body.deliveryAddress) order.deliveryAddress = req.body.deliveryAddress;
    await order.save({ transaction: t });

    await t.commit();

    // ‚¨áÔ∏è –ü–æ—Å–ª–µ –∫–æ–º–º–∏—Ç–∞ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Å—Ç–∞—Ç–∫–∞ (–Ω–µ –ª–æ–º–∞–µ–º –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ —Ç–µ–ª–µ–≥–∞ —É–ø–∞–¥—ë—Ç)
    try {
      await checkItemAndNotify(item.id);
    } catch (notifyErr) {
      console.error("Low-stock notify error:", notifyErr);
    }

    res.json({ ok: true });
  } catch (e) {
    await t.rollback();
    console.error("‚ùå –û—à–∏–±–∫–∞ confirm:", e);
    res.status(409).json({ message: e.message });
  }
});

router.get('/orders/:id', async (req, res) => {
  const order = await Order.findByPk(req.params.id);
  if (!order) return res.status(404).json({ message: 'Order not found' });
  res.json({
    id: order.id,
    paymentStatus: order.paymentStatus,
    status: order.status,
    paidAt: order.paidAt,
  });
});



module.exports = router;
