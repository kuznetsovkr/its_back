const express = require("express");
const jwt = require("jsonwebtoken");
const User = require("../models/User");
const Order = require("../models/Order");
const sendOrderToTelegram = require("../telegram");
const sequelize = require("../db");
const Inventory = require("../models/Inventory");
const PaymentEvent = require("../models/PaymentEvent");
const router = express.Router();

const multer = require("multer");
const fs = require("fs");
const path = require("path");
const { checkItemAndNotify } = require("../services/lowStockMonitor"); // –ø—É—Ç—å –ø–æ–¥–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω
const { findInventoryForOrder } = require("../services/inventoryResolver");
const { finalizePaidOrder } = require("../services/orderFinalizer");


const upload = multer({ dest: "uploads/" }); // –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã

// ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
router.post("/create", upload.array("images", 10), async (req, res) => {
  try {
    const authHeader = req.headers.authorization;
    console.log("üîë –ó–∞–≥–æ–ª–æ–≤–æ–∫ Authorization:", authHeader);

    // 1) –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–∫–∞–∫ –±—ã–ª–æ)
    let user = null;
    if (authHeader) {
      try {
        const token = authHeader.split(" ")[1];
        user = jwt.verify(token, process.env.JWT_SECRET);
        console.log("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:", user);
      } catch (error) {
        console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞:", error.message);
      }
    }

    // 2) –ó–∞–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å (–µ—Å–ª–∏ –µ—Å—Ç—å)
    let profile = null;
    if (user) {
      profile = await User.findByPk(user.id, { raw: true });
      console.log("‚úÖ –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", profile);
    } else {
      console.log("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞.");
    }

    // 3) –ü–æ–ª—è —Ñ–æ—Ä–º—ã (multer –∫–ª–∞–¥—ë—Ç —Å—Ç—Ä–æ–∫–∏ –≤ req.body)
    const body = req.body || {};
    const safe = (v) => (v == null ? "" : String(v));

    // ‚¨áÔ∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: formData ‚Üí –ø—Ä–æ—Ñ–∏–ª—å ‚Üí –ø—É—Å—Ç–æ
    const firstName       = safe(body.firstName)   || safe(profile?.firstName);
    const lastName        = safe(body.lastName)    || safe(profile?.lastName);
    const middleName      = safe(body.middleName)  || safe(profile?.middleName);
    const phone           = safe(body.phone)       || safe(profile?.phone);
    const productType     = safe(body.productType);
    const color           = safe(body.color);
    const size            = safe(body.size);
    const embroideryType  = safe(body.embroideryType);
    const customText      = safe(body.customText);
    const comment         = safe(body.comment);
    const deliveryAddress = safe(body.deliveryAddress);
    const totalPrice      = Number(body.totalPrice) || 0;

    // 4) –ú–∏–Ω–∏-–≤–∞–ª–∏–¥–∞—Ü–∏—è, —á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏—Ç—å notNull –Ω–∞ –º–æ–¥–µ–ª–∏
    if (!firstName || !lastName) {
      return res.status(400).json({ message: "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è" });
    }

    console.log("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –¥–∞–Ω–Ω—ã–º–∏:", {
      id: user?.id || null,
      firstName, lastName, middleName, phone,
      productType, color, size, embroideryType, customText, comment,
    });

    // 5) –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞ —Å–∫–ª–∞–¥–µ
    const inv = await findInventoryForOrder(productType, color, size);
    if (!inv) {
      console.error("[CREATE] inventory NOT FOUND for:", productType, color, size);
      return res.status(400).json({ message: "–ö–æ–º–±–∏–Ω–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
    }
    if (inv.quantity < 1) {
      console.error("[CREATE] not enough stock id=", inv.id, "qty=", inv.quantity);
      return res.status(409).json({ message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ" });
    }

    // 6) –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑
    const order = await Order.create({
      userId: user?.id || null,
      phone,
      firstName,
      lastName,
      middleName,
      productType,
      color,
      size,
      embroideryType,
      customText,
      comment,
      orderDate: new Date(),
      status: "–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã",
      paymentStatus: "pending",
      totalPrice,
      deliveryAddress,
      inventoryId: inv.id,
    });

    console.log("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î", order.id);
    res.json({ message: "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω", orderId: order.id });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞", error: error.message });
  }
});
router.put("/update-status/:orderId", async (req, res) => {
    try {
        const { orderId } = req.params;
        const { status } = req.body;

        const validStatuses = ["–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã", "–û–ø–ª–∞—á–µ–Ω–æ", "–ü—Ä–∏–Ω—è—Ç", "–î–∏–∑–∞–π–Ω", "–í—ã—à–∏–≤–∫–∞", "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω", "–û—Ç–º–µ–Ω–µ–Ω"];
        if (!validStatuses.includes(status)) {
            return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å" });
        }

        const order = await Order.findByPk(orderId);
        if (!order) {
            return res.status(404).json({ message: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        order.status = status;
        await order.save();

        res.json({ message: "–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω", order });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞" });
    }
});

// üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –ø–æ –Ω–æ–º–µ—Ä—É
router.get("/status/:orderId", async (req, res) => {
    try {
        const { orderId } = req.params;
        const order = await Order.findByPk(orderId);

        if (!order) {
            return res.status(404).json({ message: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        res.json({ status: order.status });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

// üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get("/user", async (req, res) => {
    try {
        const token = req.headers.authorization?.split(" ")[1];
        if (!token) return res.status(401).json({ message: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞" });

        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        const userId = decoded.id;

        const orders = await Order.findAll({ where: { userId }, order: [["orderDate", "DESC"]] });

        res.json(orders);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

router.get("/all", async (req, res) => {
    try {
        const token = req.headers.authorization?.split(" ")[1];
        if (!token) return res.status(401).json({ message: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞" });

        const decoded = jwt.verify(token, process.env.JWT_SECRET);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        const user = await User.findByPk(decoded.id);
        if (!user || user.role !== "admin") {
            return res.status(403).json({ message: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞" });
        }

        // –ï—Å–ª–∏ –∞–¥–º–∏–Ω, –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã
        const orders = await Order.findAll({ order: [["orderDate", "DESC"]] });

        res.json(orders);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

// POST /api/orders/confirm/:orderId
router.post("/confirm/:orderId", async (req, res) => {
  const { orderId } = req.params;
  const { provider = "manual", eventId, totalPrice, deliveryAddress } = req.body || {};

  try {
    const result = await finalizePaidOrder({
      orderId,
      provider,
      eventId: eventId || `${provider}-${orderId}`,
      overrides: { totalPrice, deliveryAddress },
    });

    if (!result.ok && result.message) {
      return res.status(409).json({ message: result.message });
    }
    return res.json({ ok: true, alreadyProcessed: !!result.alreadyProcessed });
  } catch (e) {
    return res.status(409).json({ message: e.message });
  }
});

// üëâ –î–û–õ–ñ–ï–ù –±—ã—Ç—å –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞, –ø–µ—Ä–µ–¥ module.exports
router.get('/:id', async (req, res) => {
  const id = Number(req.params.id);
  if (!Number.isFinite(id)) return res.status(400).json({ message: 'Bad id' });

  const order = await Order.findByPk(id);
  if (!order) return res.status(404).json({ message: 'Order not found' });

  // –û—Ç–¥–∞—ë–º —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ —Ñ—Ä–æ–Ω—Ç—É
  res.json({
    id: order.id,
    paymentStatus: order.paymentStatus || null, // 'pending' | 'paid' | 'failed'
    status: order.status,                        // –±–∏–∑–Ω–µ—Å-—Å—Ç–∞—Ç—É—Å
    paidAt: order.paidAt,
    totalPrice: order.totalPrice,
    paykeeperInvoiceId: order.paykeeperInvoiceId,
    paykeeperPaymentId: order.paykeeperPaymentId,
  });
});




module.exports = router;
